name: Java CI with Gradle

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Set up CI server
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # Gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        env:
          REDIS_HOST: localhost  # 로컬 테스트용
          REDIS_PORT: 6379
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_URL: ${{ secrets.S3_URL }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          TOSS_CLIENT_KEY: ${{ secrets.TOSS_CLIENT_KEY }}
          TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
          SUCCESS_URL: ${{ secrets.SUCCESS_URL }}
          FAIL_URL: ${{ secrets.FAIL_URL }}
        run: ./gradlew test

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
        with:
          files: |
            build/test-results/**/*.xml